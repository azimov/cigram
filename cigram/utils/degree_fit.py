from __future__ import division
import numpy as np
from itertools import chain
from collections import defaultdict


def goodness_of_fit_ks_test(empirical_dist, sample_dists, dd=10):
    """
    Given a set of sample disributions generated by our data and an empirical distribution
    we ask the question "what is the probability that the empirical data would be found within our model samples"
    
    For this we use the two sample kolmogorov simirnov, a non-parametric test that measures the maximum distance between the cdfs of each sample

    Null Hypothesis:
         The empirical data comes from the same distribution as the samples, generated by our model
        
    If we reject the null hypothesis the distance is only useful when opimising the model

    The larger the P value, the better the fit the model has to the data.
    
    Naturally, the power of this test is limiited by the number of sample distributions used. 
    Graphs are large objects, as a result we probably want rejection of the null hypothesis at p < 95% 
    """
    # first we calculate the mean distribution of our samples
    # find the maximum k in all the samples and the empirical data
    
    max_k = max(chain(*sample_dists + [empirical_dist]))
    # Our "mean" distribution
    F_hat = np.zeros(max_k)
    c_dist = defaultdict(lambda: np.zeros(max_k))
    
    for k in range(max_k):
        for i, samp in enumerate(sample_dists):
            c_dist[i][k] = len([d for d in samp if d <= k])/len(samp)
            F_hat[k] += c_dist[i][k]
        
        F_hat[k] /= len(sample_dists)

    # take the ks test from the mean distribution of samples
    sample_distances = [ np.max(np.absolute(F_hat[dd:] - s[dd:])) for s in c_dist.values() ]
    
    cumulative_e_dist = np.zeros(max_k)
    for k in range(max_k):
        cumulative_e_dist[k] = len([d for d in empirical_dist if d <= k])/len(empirical_dist)
    
    
    # We then test the distance the empirical data has from the mean
    ks_dist = np.max(np.absolute(F_hat[dd:] - cumulative_e_dist[dd:]))
    
    # generate a p_value that the empirical data set falls within our samples
    p_value = len([i for i in sample_distances if i > ks_dist] )/ len(sample_dists)
    
    return ks_dist, p_value